x<-matrix()
x<-[1:10]
x<-x(1:10)
x<-matrix(1:10)
inverse(x)
inv(x)
library(matlib)
library(matlib)
x<-matrix(1:9,3,3)
det(x)
inv(x)
x<-matrix(40:48,3,3)
det(x)
ai<-inv(x)
?inv
??inv
matrix.inverse(x)
x<-matrix(40:48,3,3)
matrix.inverse(x)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setmatrix<-function(inverse) m<<-inverse
getmatrix<-function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m<-x$getinverse()## Return a matrix that is the inverse of 'x'
if(!is.null(m)){
message("getting cached data")
return (m)
}
data<-x$get()
m<-inverse(data,...)
x$setmean(m)
m
}
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setmatrix<-function(inverse) m<<-inverse
getmatrix<-function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
m<-x$getinverse()## Return a matrix that is the inverse of 'x'
if(!is.null(m)){
message("getting cached data")
return (m)
}
data<-x$get()
m<-inverse(data,...)
x$setmean(m)
m
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setmatrix<-function(inverse) m<<-inverse
getmatrix<-function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setmatrix<-function(inverse) m<<-inverse
getmatrix<-function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setmatrix<-function(inverse) m<<-inverse
getmatrix<-function() m
list(set=set,get=get,setmatrix=setmatrix,getmatrix=getmatrix)
}
cacheSolve <- function(x, ...) {
m<-x$getinverse()## Return a matrix that is the inverse of 'x'
if(!is.null(m)){
message("getting cached data")
return (m)
}
data<-x$get()
m<-inverse(data,...)
x$setinverse(m)
m
}
A<-matrix(c(1,3,4,5,6,7,2,8,3),3,3)
A1<-makeCacheMatrix(A)
cacheSolve(A1)
cacheSolve <- function(x, ...) {
m<-x$getinverse()## Return a matrix that is the inverse of 'x'
if(!is.null(m)){
message("getting cached data")
return (m)
}
data<-x$get()
m<-solve(data,...)
x$setinverse(m)
m
}
cacheSolve(A1)
A<-matrix(c(1,3,4,5,6,7,2,8,3),3,3)
A1<-makeCacheMatrix(A)
cacheSolve(A1)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function()x
setinverse<-function(inverse) m<<-inverse
getinverse<-function() m
list(set=set,get=get,setinverse=setinverse,getinverse=getinverse)
}
cacheSolve <- function(x, ...) {
m<-x$getinverse()## Return a matrix that is the inverse of 'x'
if(!is.null(m)){
message("getting cached data")
return (m)
}
data<-x$get()
m<-solve(data,...)
x$setinverse(m)
m
}
A<-matrix(c(1,3,4,5,6,7,2,8,3),3,3)
A1<-makeCacheMatrix(A)
cacheSolve(A1)
